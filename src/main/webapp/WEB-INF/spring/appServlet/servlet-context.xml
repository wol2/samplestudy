<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- #6. 이미지, 동영상, js, css 등등의 파일이 위치하는 경로를 말한다.
	          그 경로는 /webapp/resources 아래에 위치하거나
	          또는 /webapp/resources 아래에 폴더를 만들어서 저장시켜야 한다. --> 
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	
	<!-- #6. 뷰단 표기는 return "뷰페이지명"; 으로 한다.
	          그러면 뷰페이지명는 어디에 저장시켜야 하냐라면
	         /WEB-INF/views/뷰페이지명.jsp 으로 저장시켜야 한다. -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- #6. com.test.spring 의 모든 컨트롤러(*.java)파일은 항상 com.test.spring 패키지 안에 있어야 한다. -->
	<!-- <context:component-scan base-package="com.test.spring" /> -->
	
	<context:component-scan base-package="com.test.*" />
	<!-- com.test.* 은 모든 컨트롤러(*.java)파일은 항상  com.test. 으로 시작하는 패키지 안에 있어야 한다. -->
	<!-- ==== Component Scan 은 XML 파일에 일일이 빈등록을 하지 않고 
	           빈으로 등록되어야 할  클래스명 앞에 @Component 어노테이션을 써주면 해당 클래스는 자동으로 빈등록이 되어지는 것이다.
	           즉, 패키지 com.test.* 안에서 생성된 클래스들을 스캔하여 클래스명 앞에 @Component 어노테이션을 적어준것이 있는지 검사하여 
	           클래스명 앞에 @Component 어노테이션이 있다라면 이 클래스는 자동적으로 bean 으로 등록된다.         
	           따라서, XML 파일에 일일이 빈등록 작업을 하지 않아도 자동적으로 한꺼번에 bean 등록이 되어진다. 
	          XML 파일은 배치서술자 이므로 톰캣서버가 구동되어질때 한번만 읽어들인다. 
	           이 XML 파일에 빈을 등록시키면 톰캣서버가 구동될때 bean 으로 등록되어진 클래스는 모두 객체화 되어 
	           메모리에 올라와 언제든지 작업을 할 준비가 되어지는 것이다. -->
	
</beans:beans>
